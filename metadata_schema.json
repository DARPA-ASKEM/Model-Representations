{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "type": "object",
  "properties": {
    "metadata":{
      "title": "AttributeCollection",
      "description": "Represents a collection of attributes ",
      "type": "object",
      "properties": {
        "attributes": {
          "title": "Attributes",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Attribute"
          }
        }
      },
      "required": [],
      "$id": "#/definitions/AttributeCollection",
      "definitions": {
        "AttributeType": {
          "title": "AttributeType",
          "description": "An enumeration.",
          "enum": [
            "anchored_extraction",
            "document_collection",
            "equation",
            "fn_reference",
            "scenario_context"
          ],
          "type": "string",
          "$id": "#/definitions/AttributeType"
        },
        "ID": {
          "title": "ID",
          "description": "Represents an identifier such as a UUID, hash, or arbitrary string ",
          "type": "object",
          "properties": {
            "id": {
              "title": "Id",
              "type": "string"
            }
          },
          "required": [
            "id"
          ],
          "$id": "#/definitions/ID"
        },
        "TextExtraction": {
          "title": "TextExtraction",
          "description": "Represents the origin or a text extraction ",
          "type": "object",
          "properties": {
            "page": {
              "title": "Page",
              "type": "integer"
            },
            "block": {
              "title": "Block",
              "type": "integer"
            },
            "char_start": {
              "title": "Char Start",
              "type": "integer"
            },
            "char_end": {
              "title": "Char End",
              "type": "integer"
            },
            "document_reference": {
              "$ref": "#/definitions/ID"
            }
          },
          "required": [
            "char_start",
            "char_end",
            "document_reference"
          ],
          "$id": "#/definitions/TextExtraction"
        },
        "Provenance": {
          "title": "Provenance",
          "description": "Represents the origin of a piece of information related to the extractions ",
          "type": "object",
          "properties": {
            "method": {
              "title": "Method",
              "type": "string"
            },
            "timestamp": {
              "title": "Timestamp",
              "type": "string",
              "format": "date-time"
            }
          },
          "required": [
            "method",
            "timestamp"
          ],
          "$id": "#/definitions/Provenance"
        },
        "Name": {
          "title": "Name",
          "description": "A \"named\" concept ",
          "type": "object",
          "properties": {
            "id": {
              "$ref": "#/definitions/ID"
            },
            "name": {
              "title": "Name",
              "type": "string"
            },
            "extraction_source": {
              "$ref": "#/definitions/TextExtraction"
            },
            "provenance": {
              "$ref": "#/definitions/Provenance"
            }
          },
          "required": [
            "id",
            "name",
            "provenance"
          ],
          "$id": "#/definitions/Name"
        },
        "Grounding": {
          "title": "Grounding",
          "description": "Grounding enables associating a DKG concept identifier with an extraction, along with what information was\nused as the basis for inferring a grounding (through the source list), what algorithm was used for the inference\n(through provenance), and a score estimating the confidence in the grounding (to be used for ranking among\ncandidate groundings).\n\nThere are a couple of different types of elements that may be grounded (this list might be expanded in the\nfuture) \u2013 current:\n\n    - AnchoredExtraction: grounding may be based on the Name(s) and/or Description(s) of the AnchoredExtraction.\n     In this case, the source list contains the IDs for any Name(s) or Description(s) used by the grounding\n     algorithm (most likely an embedding-based model; in embedding models, the order of the IDs indicates the order\n     in which Name(s) and/or Description(s) string were concatenated for the embedding input). In general, if\n     Description(s) are available, those will be used, with Name(s) as a fall-back when there is no Description.\n\n    - Value: Values may be optionally grounded; here the source is the id of the ValueSpec that the Value is a\n     member of: ValueSpec.value.\n\n    - Units: Units may be grounded; here the source is the id of the ValueSpec that the Units is a\n    member of: ValueSpec.unit.",
          "type": "object",
          "properties": {
            "grounding_text": {
              "title": "Grounding Text",
              "type": "string"
            },
            "grounding_id": {
              "title": "Grounding Id",
              "type": "string"
            },
            "source": {
              "title": "Source",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ID"
              }
            },
            "score": {
              "title": "Score",
              "type": "number"
            },
            "provenance": {
              "$ref": "#/definitions/Provenance"
            }
          },
          "required": [
            "grounding_text",
            "grounding_id",
            "source",
            "score",
            "provenance"
          ],
          "$id": "#/definitions/Grounding"
        },
        "Description": {
          "title": "Description",
          "description": "An extraction of a description string to be anchored to name(s) ",
          "type": "object",
          "properties": {
            "id": {
              "$ref": "#/definitions/ID"
            },
            "source": {
              "title": "Source",
              "type": "string"
            },
            "grounding": {
              "title": "Grounding",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Grounding"
              }
            },
            "extraction_source": {
              "$ref": "#/definitions/TextExtraction"
            },
            "provenance": {
              "$ref": "#/definitions/Provenance"
            }
          },
          "required": [
            "id",
            "source",
            "provenance"
          ],
          "$id": "#/definitions/Description"
        },
        "Value": {
          "title": "Value",
          "type": "object",
          "properties": {
            "source": {
              "title": "Source",
              "type": "string"
            },
            "grounding": {
              "title": "Grounding",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Grounding"
              }
            },
            "extraction_source": {
              "$ref": "#/definitions/TextExtraction"
            }
          },
          "required": [
            "source"
          ],
          "$id": "#/definitions/Value"
        },
        "Units": {
          "title": "Units",
          "type": "object",
          "properties": {
            "source": {
              "title": "Source",
              "type": "string"
            },
            "grounding": {
              "title": "Grounding",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Grounding"
              }
            },
            "extraction_source": {
              "$ref": "#/definitions/TextExtraction"
            }
          },
          "required": [
            "source"
          ],
          "$id": "#/definitions/Units"
        },
        "BoundType": {
          "title": "BoundType",
          "description": "An enumeration.",
          "enum": [
            "closed",
            "open",
            "unbounded"
          ],
          "type": "string",
          "$id": "#/definitions/BoundType"
        },
        "Bound": {
          "title": "Bound",
          "type": "object",
          "properties": {
            "type": {
              "$ref": "#/definitions/BoundType"
            },
            "value": {
              "title": "Value",
              "type": "string"
            }
          },
          "required": [
            "type"
          ],
          "$id": "#/definitions/Bound"
        },
        "ValueSpec": {
          "title": "ValueSpec",
          "description": "Value and unit extractions may come as a pair, and since there may be more than one such pair,\nwe provide a ValueSpec as a general structure that itself can contain either a Value, a Unit,\nor a paired Value and Unit",
          "type": "object",
          "properties": {
            "id": {
              "$ref": "#/definitions/ID"
            },
            "value": {
              "$ref": "#/definitions/Value"
            },
            "units": {
              "$ref": "#/definitions/Units"
            },
            "type": {
              "title": "Type",
              "type": "string"
            },
            "bounds": {
              "title": "Bounds",
              "type": "array",
              "items": {
                "type": "array",
                "minItems": 2,
                "maxItems": 2,
                "items": [
                  {
                    "$ref": "#/definitions/Bound"
                  },
                  {
                    "$ref": "#/definitions/Bound"
                  }
                ]
              }
            },
            "provenance": {
              "$ref": "#/definitions/Provenance"
            }
          },
          "required": [
            "id",
            "provenance"
          ],
          "$id": "#/definitions/ValueSpec"
        },
        "Dataset": {
          "title": "Dataset",
          "description": "Represents a dataset ",
          "type": "object",
          "properties": {
            "id": {
              "$ref": "#/definitions/ID"
            },
            "name": {
              "title": "Name",
              "type": "string"
            },
            "metadata": {
              "title": "Metadata",
              "type": "string"
            }
          },
          "required": [
            "id",
            "name"
          ],
          "$id": "#/definitions/Dataset"
        },
        "DataColumnReference": {
          "title": "DataColumnReference",
          "description": "Represents a column of a dataset ",
          "type": "object",
          "properties": {
            "id": {
              "$ref": "#/definitions/ID"
            },
            "name": {
              "title": "Name",
              "type": "string"
            },
            "dataset": {
              "$ref": "#/definitions/Dataset"
            }
          },
          "required": [
            "id",
            "name",
            "dataset"
          ],
          "$id": "#/definitions/DataColumnReference"
        },
        "AnchoredExtraction": {
          "title": "AnchoredExtraction",
          "description": "Supports associations of various types of reading extractions associated with a \"named\" concept.\nThere could be more than one name for the same element.",
          "type": "object",
          "properties": {
            "id": {
              "$ref": "#/definitions/ID"
            },
            "names": {
              "title": "Names",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Name"
              }
            },
            "descriptions": {
              "title": "Descriptions",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Description"
              }
            },
            "value_specs": {
              "title": "Value Specs",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ValueSpec"
              }
            },
            "groundings": {
              "title": "Groundings",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Grounding"
              }
            },
            "data_columns": {
              "title": "Data Columns",
              "type": "array",
              "items": {
                "$ref": "#/definitions/DataColumnReference"
              }
            }
          },
          "required": [
            "id",
            "names"
          ],
          "$id": "#/definitions/AnchoredExtraction"
        },
        "DocumentReference": {
          "title": "DocumentReference",
          "description": "Represents a paper from which an extraction comes ",
          "type": "object",
          "properties": {
            "id": {
              "$ref": "#/definitions/ID"
            },
            "source_file": {
              "title": "Source File",
              "type": "string"
            },
            "doi": {
              "title": "Doi",
              "type": "string"
            }
          },
          "required": [
            "id",
            "source_file",
            "doi"
          ],
          "$id": "#/definitions/DocumentReference"
        },
        "DocumentCollection": {
          "title": "DocumentCollection",
          "type": "object",
          "properties": {
            "documents": {
              "title": "Documents",
              "type": "array",
              "items": {
                "$ref": "#/definitions/DocumentReference"
              }
            }
          },
          "required": [
            "documents"
          ],
          "$id": "#/definitions/DocumentCollection"
        },
        "ImageExtraction": {
          "title": "ImageExtraction",
          "description": "Represents an image extracted by COSMOS or any document processing front-end ",
          "type": "object",
          "properties": {
            "document_coordinate": {
              "title": "Document Coordinate"
            },
            "document_reference": {
              "$ref": "#/definitions/ID"
            }
          },
          "required": [
            "document_reference"
          ],
          "$id": "#/definitions/ImageExtraction"
        },
        "Equation": {
          "title": "Equation",
          "description": "The following is generalized to support extraction of an equation from a document or other medium ",
          "type": "object",
          "properties": {
            "id": {
              "$ref": "#/definitions/ID"
            },
            "source_text": {
              "title": "Source Text",
              "type": "string"
            },
            "latex": {
              "title": "Latex",
              "type": "string"
            },
            "p_mathml": {
              "title": "P Mathml",
              "type": "string"
            },
            "c_mathml": {
              "title": "C Mathml",
              "type": "string"
            },
            "source_image": {
              "title": "Source Image",
              "type": "string"
            },
            "extraction_source": {
              "$ref": "#/definitions/ImageExtraction"
            },
            "provenance": {
              "$ref": "#/definitions/Provenance"
            }
          },
          "required": [
            "id",
            "provenance"
          ],
          "$id": "#/definitions/Equation"
        },
        "FNReference": {
          "title": "FNReference",
          "description": "Reference to one or more FN Paths in a Gromet Function Network Module Collection\nThe HMI does not need to resolve these, but these can be used by SKEMA to reach\nback to source FN structure(s) (and source code).",
          "type": "object",
          "properties": {
            "paths": {
              "title": "Paths",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "source_file": {
              "title": "Source File",
              "type": "string"
            }
          },
          "required": [
            "paths",
            "source_file"
          ],
          "$id": "#/definitions/FNReference"
        },
        "LocationContext": {
          "title": "LocationContext",
          "type": "object",
          "properties": {
            "location": {
              "title": "Location",
              "type": "string"
            },
            "provenance": {
              "$ref": "#/definitions/Provenance"
            },
            "grounding": {
              "$ref": "#/definitions/Grounding"
            },
            "extraction_source": {
              "$ref": "#/definitions/TextExtraction"
            }
          },
          "required": [
            "location",
            "provenance"
          ],
          "$id": "#/definitions/LocationContext"
        },
        "TemporalContext": {
          "title": "TemporalContext",
          "type": "object",
          "properties": {
            "datetime": {
              "title": "Datetime",
              "type": "string"
            },
            "start_datetime": {
              "title": "Start Datetime",
              "type": "string"
            },
            "end_datetime": {
              "title": "End Datetime",
              "type": "string"
            },
            "provenance": {
              "$ref": "#/definitions/Provenance"
            },
            "grounding": {
              "$ref": "#/definitions/Grounding"
            }
          },
          "required": [
            "provenance"
          ],
          "$id": "#/definitions/TemporalContext"
        },
        "ScenarioContext": {
          "title": "ScenarioContext",
          "type": "object",
          "properties": {
            "id": {
              "$ref": "#/definitions/ID"
            },
            "extractions": {
              "title": "Extractions",
              "default": [],
              "type": "array",
              "items": {
                "$ref": "#/definitions/ID"
              }
            },
            "location": {
              "$ref": "#/definitions/LocationContext"
            },
            "time": {
              "$ref": "#/definitions/TemporalContext"
            }
          },
          "required": [
            "id"
          ],
          "$id": "#/definitions/ScenarioContext"
        },
        "Attribute": {
          "title": "Attribute",
          "description": "A top-level generic Attribute container that can be typed\nAttributes are placed in the AMR \"metadata\" field (a JSON array), and may optional refer",
          "type": "object",
          "properties": {
            "type": {
              "$ref": "#/definitions/AttributeType"
            },
            "amr_element_id": {
              "title": "Amr Element Id",
              "type": "string"
            },
            "payload": {
              "title": "Payload",
              "anyOf": [
                {
                  "$ref": "#/definitions/AnchoredExtraction"
                },
                {
                  "$ref": "#/definitions/DocumentCollection"
                },
                {
                  "$ref": "#/definitions/Equation"
                },
                {
                  "$ref": "#/definitions/FNReference"
                },
                {
                  "$ref": "#/definitions/ScenarioContext"
                }
              ]
            }
          },
          "required": [
            "type",
            "payload"
          ],
          "$id": "#/definitions/Attribute"
        }
      }
    }
  },
  "required": []
}