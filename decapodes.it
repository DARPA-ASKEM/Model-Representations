struct ModelHeader
    id::Optional{String}
    description::String
    name::String
    model_version::String
    schema::String
    schema_name::String	
end

struct ContextHeader
  id::Optional{String}
  name::String
  description::String
  parent_model::String
end

struct ConfigurationHeader
  id::Optional{String}
  description::String
  name::String
  parent_context::String
end

struct File
	uri::String
	format::String
end







@sum Parameter begin
  LiteralParameter(type::String, value::Float64)
  ConstantParameter(type::String, value::String)
end

struct Condition
  type::String
  value::String
  domain_mesh::String
end

@sum DatasetFormat begin
  NetCDF
  CSV
end

struct DatasetFile
  uri::String
  format::DatasetFormat
  shape::Vector{Int64}
end

struct Dataset
  type::String
  name::String
  description::String
  file::DatasetFile  
end

struct DecapodeConfiguration
  parameters::Object{Parameter}
  initial_conditions::Object{Condition}
  boundary_conditions::Object{Condition}
  datasets::Object{Dataset}
end

struct ASKEMDecapodeConfiguration
  header::ConfigurationHeader
  configuration::DecapodeConfiguration
end

@sum Constant begin
  FileConstant(value::File)
  RawConstant(value::Float64)
end

@sum ConstraintValue begin
	UnitValue(value::Float64, unit::String)
	Datetime(timestamp::String)
end

struct Dimensionality
	manifold::Int64
	embedding::Int64
end

@sum Region begin
	RegionEquation(equations::Vector{String})
end

@sum MethodType begin
  Barycenter
  Circumcenter
end

struct PrimalDualRelation
  primal::String
  dual::String
  method::MethodType
end

@sum RelationType begin
  Perimeter
end

struct SubmeshRelation
  relation::RelationType
  mesh::String
  submesh::String
end

struct Mesh
  id::String
  description::String
  dimensionality::Dimensionality
  vertex_count::Int64
  edge_count::Int64
  face_count::Int64
  volume_count::Int64
  regions::Vector{Region}
  checksum::String
  file::File
end

struct DecapodeContext
  constants::Object{Constant}
  spatial_constraints::Object{ConstraintValue}
  temporal_constraints::Object{ConstraintValue}
  primal_dual_relations::Vector{PrimalDualRelation}
  mesh_submesh_relations::Vector{SubmeshRelation}
  meshes::Vector{Mesh}
end

struct ASKEMDecapodeContext
  header::ContextHeader
  context::DecapodeContext
end



@sum Term begin
  Var(name::Symbol)
  Lit(name::Symbol)
  AppCirc1(fs::Vector{Symbol}, arg::Term)
  App1(f::Symbol, arg::Term)
  App2(f::Symbol, arg1::Term, arg2::Term)
  Plus(args::Vector{Term})
  Mult(args::Vector{Term})
  Tan(var::Term)
end

struct Judgement
  var::Symbol
  dim::Symbol
  space::Symbol
end

@sum Equation begin
  Eq(lhs::Term, rhs::Term)
end

struct DecaExpr
  context::Vector{Judgement}
  equations::Vector{Equation}
end

@schema SchDecapode begin
  (Var, TVar, Op1, Op2)::Ob
  (Type, Operator)::AttrType(Symbol)
  src::Hom(Op1, Var)
  tgt::Hom(Op1, Var)
  proj1::Hom(Op2, Var)
  proj2::Hom(Op2, Var)
  res::Hom(Op2, Var)
  incl::Hom(TVar, Var)

  op1::Attr(Op1, Operator)
  op2::Attr(Op2, Operator)
  type::Attr(Var, Type)
end

@schema SchNamedDecapode <: SchDecapode begin
  Name::AttrType(Symbol)
  name::Attr(Var, Name)
end

@abstract_acset_type AbstractDecapode
@abstract_acset_type AbstractNamedDecapode <: AbstractDecapode

@acset_type DecapodeSym(
  SchDecapode,
  index=[:src, :tgt, :res, :incl, :op1, :op2, :type],
  generic=Decapode
) <: AbstractDecapode

@acset_type NamedDecapodeSym(
  SchNamedDecapode,
  index=[:src, :tgt, :res, :incl, :op1, :op2, :type, :name],
  generic=NamedDecapode
) <: AbstractNamedDecapode

@schema SchSummationDecapode <: SchNamedDecapode begin
  # Σ are the white nodes in the Decapode drawing
  # Summands are the edges that connect white nodes to variables (the projection maps)
  # because addition is commutative, we don't need to distinguish the order
  (Σ, Summand)::Ob
  summand::Hom(Summand, Var)
  summation::Hom(Summand, Σ)
  sum::Hom(Σ, Var)
end

@acset_type SummationDecapodeSym(
  SchSummationDecapode,
  index=[:src, :tgt, :res, :incl, :op1, :op2, :type],
  generic=SummationDecapode
) <: AbstractNamedDecapode


struct ASKEMDecapodeModel
  header::ModelHeader
  model::DecaExpr
end


struct ASKEMDecapodeSimulationPlan
  header::ModelHeader
  model::DecaExpr
  context::DecapodeContext
  configuration::DecapodeConfiguration
end
